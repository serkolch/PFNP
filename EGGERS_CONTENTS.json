{"home":{"content":"# Programming For Non-Programmers!\n---\n\nHello, Wrold! Welcome to class. Today and tomorrow, we will take a deep dive into the world of web programming. \n\n#### Main Goals\n---\n1. Learn key concepts and terminology of the industry.\n2. Understand how the web works on a high level\n3. Build well structured, practically styled static web pages\n4. Build a simple, dynamic API powered webpage.\n\n#### Day One\n---\n\n* #### [Essential Terminology](#essential-terminology)\n* #### [Setting Up Your Environment](#setting-up-your-environment)\n* #### [Guts of an HTTP Request](#guts-of-an-http-request)\n* #### [Deploying to the internets](#deploying-to-the-internets)\n* #### [HTML Basics](#html-basics)\n* #### [Semantic HTML](#semantic-html)\n* #### [Practical CSS3 Guidelines](#practical-css3-guidelines)\n* #### [Styling for various Screens](#styling-for-various-screens)\n* #### [Frontend Frameworks](#frontend-frameworks)\n\n#### Day Two\n---\n\n* #### [Warmup](#warmup)\n* #### [Javascript Basics](#javascript-basics)\n* #### [Functions and Conditionals](#functions-and-conditionals)\n* #### [Arrays and Objects](#arrays-and-objects)\n* #### [Dom Manipulation](#dom-manipulation)\n* #### [Server Side Javascript](#server-side-javascript)\n\n#### \n\n\n\n\n","idx":0},"title":{"content":"PFNP","idx":1},"desc":{"content":"A crash course on web development.","idx":2},"essential-terminology":{"content":"# Essential Terminology\n---\n\n**Learning Objective**: Learn the essential words and concepts that are used on a daily basis by engineers and project/product managers on the job.\n\n---\n\nHere are some words and concepts that will hopefully give you a more holistic view of the more technical aspects of the industry. \n\n#### Define: Program\n---\nDiscrete, highly logical and explicit instructions that are parsed and executed by a computer.\n\nWe call this set of human-readable instructions **source code**, or colloquially, a **computer program**.\n\n**Compilers** can take this source code and transform it into **machine code**, a representation of the source that can be executed by the computer's **central processing unit** or **CPU**. \n\nNot all programs are compiled though, some are **interpreted**. The difference is that compiled languages need a step where the source code is physically transformed into machine code. However, with an interpreted language, this additional step is **excluded** in favor of **parsing** and **executing** the source code directly when the program is run.\n\n#### How programs are written\n---\n\nAll programs are composed with a collection of **fundamental** concepts that, when combined, can essentially dictate a wide variety of tasks a computer can perform.\n\nHere are a collection of these most important concepts:\n\n* **Declarations**: typically, we can store and retrieve data in our programs by associating them with intermediary values that we call **variables**\n* **Expressions**: we use expressions to evaluate stuff. For example, **`2 + 2`** is an example of an expression that will **evaluate** a value, namely 4. \n* **NOTE**: typically we can use expressions and declarations in tandem to perform complex tasks. For instance, we can reference a variable we declared in an expression to help us evaluate new values which can then be stored.\n* **Statements**: statements will use expressions and declarations to alternate a program's **control flow**, which is essentially the order in which declarations, expressions, and other statements are executed.\n\nAside from these fundamental concepts, we also talk a lot about this idea of **algorithms**. An **algorithm** is simple a series of declarations, expressions, and statements that can be used over and over again to solve well defined problems of a certain type.\n\nFor example, we can implement an algorithm that converts temperature from **fahrenheit** to **celsius**. It would look something like this:\n\n1. **Declare** F = 32;\n2. **Expression** ( **F** - 32 ) / 1.8;\n3. **Declare** C = **Evaluated** expression from **[2]**\n\nThis is a form of **pseudo** code where we define the steps a computer program &mdash; **any** &mdash; computer program can take to convert **fahrenheit** to **celsius**.\n\nThe beauty of programming is that all of it revolves around the same key set of concepts and ideas. For this reason, we do not need to specify any **particular programming language** when discussing the functional aspects of a program.\n\n#### Define: Programming languages\n---\n\nA programming language is a series of **grammar** and **rules** that we can define towards writing source code.\n\nLanguages are effectively different approaches towards communicating the same ideas in programming. Essentially, we can communicate in say both **French** and **English**, what mainly differs is the structure of our sentences and the actual words and sounds themselves.\n\nThe **same analogy** can be made with programming languages.\n\n#### Examples of programming languages\n---\n\nThere are many. Way too many. \n\nHere are some of the most popular ones, though.\n\n1. **JavaScript**: this language is interpreted.\n2. **Python**: this language is interpreted.\n3. **Java**: this language is compiled\n4. **Ruby**: this language is interpreted.\n5. **C/C++**: this language is compiled.\n\nThese languages all build on the same concepts defined above; the main difference lies in **how** they are run (compiled vs interpreted) and also **how** they are used. \n\nIn general, anything programmable can be programmed in each of the languages defined above. However, some languages are better suited for certain tasks above others. \n\nFor example, to perform web programming on the front-end, you'll want to write JavaScript. This is because all browsers collectively support running javascript within it's environment. \n\n#### What is web development?\n---\nThe use of programming languages and concepts towards producing a system that listens to user requests over the internet and serves back HTML, CSS, and interaction code to the client.\n\n#### What is the difference between a web site and web app\n---\nWeb sites are more **static**. Think of them as sort of like interactive brochures. They typically don't hold any state and are usually just information.\n\nA web app is more like an iOS or Android app. It holds state, does not refresh itself and in general **does something** vs **showing something**.\n\n#### What are the stages of web development\n---\n\nDepends on the methodology used by team. Typically, there is a UX phase, a Design phase, a Development phase bundled with extensive QA. This was the process used in the consulting firm I used to work in.\n\nFor a startup, the process is similar, however there is a lot more room for iteration and testing out ideas by putting something up for users to use and deliver feedback.\n\n#### What is the difference between front-end and back-end web development\n---\n**Front end**: Client side interactions and structure. This includes stuff like iOS apps and whatever you load in browser.\n\n**Back end**: Server side, data storage and retrival. Needs a client **of some sort** (not necessarily a browser) to work. Deals with storing and retriving information.\n\n#### Main Class Deliverable\n---\n\nIn order to explore the core concepts of this class and achieve our learning objectives, we will recreate the **traditional resume template** for the web.\n\n#### Key Requirements\n---\n\n* Template should resemble the typical resume.pdf we all maintain\n* Template should use tasteful CSS3 styles to accentuate key peices of information and design principles\n* Template should work across all screens including (and specifically) mobile\n* Template should be **printer friendly** and take up exactly one page  when printed. \n\nHere is an **[example](http://resume.taqquikarim.com/)**.\n\n<!--\n**IMPORTANT**: These definitions are **intentionally** super lightweight. Best way to learn programming concepts is by actually programming. You will pick up a vastly larger number of concepts and vocabulary when we start building websites from scratch. For this reason, I tried to keep this portion of the class as minimal as possible.\n\n#### What can you build with various languages?\n---\nBasically, anything. You can use programming languages to configure hardware, build websites, build mobile apps, desktop programs, server monitoring systems. Literally, anything.\n\n#### What is web development?\n---\nThe use of programming languages and concepts towards producing a system that listens to user requests over the internet and serves back HTML, CSS, and interaction code to the client.\n\n#### What is the difference between a web site and web app\n---\nWeb sites are more **static**. Think of them as sort of like interactive brochures. They typically don't hold any state and are usually just information.\n\nA web app is more like an iOS or Android app. It holds state, does not refresh itself and in general **does something** vs **showing something**.\n\n#### What are the stages of web development\n---\n\nDepends on the methodology used by team. Typically, there is a UX phase, a Design phase, a Development phase bundled with extensive QA. This was the process used in the consulting firm I used to work in.\n\nFor a startup, the process is similar, however there is a lot more room for iteration and testing out ideas by putting something up for users to use and deliver feedback.\n\n#### What is the difference between front-end and back-end web development\n---\n**Front end**: Client side interactions and structure. This includes stuff like iOS apps and whatever you load in browser.\n\n**Back end**: Server side, data storage and retrival. Needs a client **of some sort** (not necessarily a browser) to work. Deals with storing and retriving information.\n\n#### What are some common programming concepts?\n---\n\n* Algorithms\n* Variables\n* Loops\n* Design patterns\n\n\n-->\n","idx":3},"setting-up-your-environment":{"content":"# Setting up your Environment\n---\n\nWe will first set up the tools and resources we need to succeed in class. Then, we will set up tools and resources needed to write code.\n\n### Setting up your classroom environment\n---\nPlease set up a **[GitHub](https://www.github.com)** account. **Make sure you also verify your email** after setting up your account.\n\nI have developed a suite of tools that we will use in class to make our lives easier.\n\n\n##### [Autosync](http://autosync.io/#/course/Taq/0)\nLive class notes. For the duration of the class, all code written on my machine will be available to you in _real time_ via [Autosync](http://autosync.io/#/course/Taq/0).\n\n##### [GitBot](http://gitbot.co/#home)\nWe will use [GitBot](http://gitbot.co/#home) to deploy our webpages to the internets. You will need this in class, for homework, and generally in life.\n\n##### [Samantha](http://fewd.us/samantha/)\nSamantha is an online coding environment. We will learn javascript in [Samantha](http://fewd.us/samantha/) + it is super useful for doing quick experiments / during office hours. \n\n...There are more, but for now, these should suffice. Check out some of my writings on tools and such on my [Medium page](https://medium.com/@the_taqquikarim/).\n\n### Setting up your code environment\n---\n\nBefore we can begin our exercises in wizardry, we must download and install a few relevant programs.\n\nThese programs are going to help us write code, transfer code to servers, and view the results of our code in the browser.\n\n#### Sublime Text\n\n[Sublime Text](http://www.sublimetext.com/3) &mdash; code editor &mdash; you'll be writing code here. This is a free tool, but they will ask you to donate every few saves. However, you can use the program for free as long as you'd like.\n\n#### Chrome\n[Chrome](https://www.google.com/chrome/browser/desktop/index.html) &mdash; web browser &mdash; you'll use this to view your code assignments. So free it hurts.","idx":4},"guts-of-an-http-request":{"content":"# Guts of an HTTP Request\n---\n\n**Learning objective**: Understand how HTTP, or the HyperText Transfer Protocol, works.\n\n---\n\n#### Question \nWhat happens when you type in [http://www.google.com](http://www.google.com) into your URL bar?\n\n#### As it turns out, a whole lot.\n\n1. Chrome has no idea what [http://www.google.com](http://www.google.com) actually means, so first, it looks up the **IP Address** for Google.\n2. **DNS**, or **Domain Name System**, is a phone book containing IP Addresses for all the websites that exist on the internet.\n3. Chrome then sends an **HTTP Request** to the IP address associated with Google. An HTTP Request is essentially a text message asking Google for data.\n4. Google's **server** will issues a server **Response** back to your browser. This response is parsed by Chrome (ie: should Chrome display this response data? download it? etc)\n5. **???**\n6. Profit.\n\n#### Ok great, why do we care?\n\nThere are a few key insights to take away here.\n\nFirst and foremost, the main communication mechanism for the internet &mdash; you know, that thing that rules our lives &mdash; is **text**. Literally just **letters and words and numbers and characters**.\n\nThe other main point to take away here is this: the text that is transferred is written in a highly specific manner. It follows a very strict set of rules that can be parsed and understood by the server and the browser. In other words, this text follows a **specific set of grammatical rules**.\n\nThis set of grammar is what determines a **language**. In other words, the text being passed back and forth is a specific language (**HTML**, as it turns out). The browser and server understand this language. If **we** were to learn it as well, we would be able to command the browser to do whatever we want (ie: we would be able to create webpage layouts).\n\n\n\n\n","idx":5},"deploying-to-the-internets":{"content":"# Deploying to the internets\n---\n\n**Learning objective**: Understand the significance of Git and why GitHub is relevant to our interests.\n\n---\n\nSo at this point, we have a good sense of **how** an HTTP request works, but the main question that remains is this: **how do we get our webpage to the internets?!**\n\nTo answer this question, we must do two things: \n\n1. Build our own simple HTML page\n2. Push it to GitHub.\n\n## Building a basic HTML page\n---\nAt this point, we know that the server from our last section (say, **Google's** server) will return to us a response that is encoded in a specific way (a **language** if you will).\n\nBut! **Where is this data stored?**\n\nAs it turns out, it is stored in files and folders, in the same way we store data on our computers.\n\nSo in order for us to \"build\" our own HTML page, we must do two things:\n\n1. Create a folder to store our HTML data\n2. Create a file **within that folder** and write out HTML.\n\n## Pushing to GitHub\n---\n\nOk, now we have an HTML page! And get this: we can even load it in Chrome and see it rendered! How do we get this online?\n\nIn one word: **GitHub**.\n\n#### What is GitHub anyways?\n---\n\nGitHub is a service that allows developers to **push** their local **git repositories** online. As a courtesy, they also have their own server that will **host** HTML/CSS/JavaScript files that are found in the pushed repos.\n\nBut first, a few definitions:\n\n#### Git\n---\nGit is an open source software that allows developers to collaborate on large software projects. \n\nWith Git, developers can **commit** code at certain checkpoints. So for example, if you are building a website that requires:\n\n1. a form,\n2. a slideshow,\n3. and a server request, \n\nYou would implement the form then **commit** that code. Then, you would implement the slideshow and **commit**. Finally, you would implement the server requestand **commit** once more. \n\nThis is useful because if, for any reason your updates to the slideshow breaks your form code, you can easily **roll back** to your last commit (the form implementation) and that code would remain pristine and unbroken. \n\n#### Git Repository \n---\nWhen you take a piece of code and start tracking it with Git, you are turning it into a git **repository**. Your git repository will store all your commits, keep track of your code, give you commands that allow you to roll back to a previous commit, etc.\n\n#### Pushing to GitHub\n---\n\nThe final piece is this: your awesome git repo has let's say 500 commits on it. This is awesome! \n\nBut now calamity strikes! Your computer inexplicably dies the morning of your big presentation. Here's the main question: **are you screwed?**\n\nIn one word: **Yes**. \n\nIncidentally, this is **exactly** the problem GitHUb solves. As it turns out, Git allows you to **push** your git repos to other places. Either your friends computer, or your spare home computer, etc. GitHub is basically a cloud storage system that lets you store your git repos online for **free** and also share it with other developers.","idx":6},"html-basics":{"content":"# HTML Basics\n---\n\n**Learning objective**: Learn the basic structure of a simple HTML page.\n\n\n#### Exercise\n---\n\nPlease create a simple webpage and mark up your own resume template. Use **only** pure **HTML tags** and do not worry to much about the styles itself. You may use the **[example](http://resume.taqquikarim.com/)** above as reference.\n\nIf you do not feel comfortable using your own credentials in this exercise, feel free to make up a persona or use a celebrity (ie: **Mickey Mouse**).\n\n\n---\n\n\nHTML stands for **Hyper Text Markup Language**. It is a set of annotations that help parsers (ie: search engines) **understand** the nature of the information that is present on the page.\n\nThink of it like an outline that describes the high level importance of different elements of your webpage.\n\n#### Basic setup\n---\n\nYour typical HTML file will look like this:\n\n```html\n<!doctype html>\n<html>\n <head>\n <!--\n the HEAD section of html does not have any content\n that the user can see\n\n instead, we place things like:\n page title\n external css links\n SEO keywords\n here\n -->\n <meta charset=\"utf-8\">\n <title>My First Awesome Site</title>\n </head>\n <body>\n <!--\n\n the BODY section will contain all the tags\n that the user can _SEE_ and _INTERACT_ with\n -->\n </body>\n</html>\n```\n\n#### Key components\n---\n\n**`<!doctype html>`**\n\nThis tag tells the browser to read our HTML content as HTML5, the latest and greatest revision of the HTML spec. We MUST include it as the first thing on our .html files. I usually type it as all lower case, but it's common practice to also type as: <!DOCTYPE html>\n\n**`<html>`**\n\nThis is the root tag. Basically, all other tags in your html file must live inside this tag. Note how on the bottom of the code snippet, we have a \"\". This is called closing a tag and we must close all tags that we open (with the exception of a few). If we do not do this, our HTML markup becomes invalid.\n\n**`<head>`**\n\nThis section contains content that does not show the user things. Typically, we would expect to see things such as the page title, external links, and SEO tags here.\n\n**`<body>`**\n\nAll the magic happens here. All the tags the user interacts with should live in this tag.\n\n#### Commonly used HTML Tags\n---\n\n```html\n<!--\n the h1 - or heading one - will have the most important text on page \n by the old guard, we should really only have one h1 per page\n -->\n <h1>Hello, Wrold</h1>\n\n <h2>This is a h2</h2>\n\n <h3>This is an h3</h3>\n\n <h4>This is an h4</h4>\n\n <h5>This is an h5</h5>\n\n <h6>This is an h6</h6> \n\n <!--\n this is an inline element\n unline the block element, which is meant to provide structure\n the inline element is interpreted as content\n this means that will appear next to one another\n -->\n <strong>This is an inline element</strong>\n <strong>This is another inline element</strong>\n\n <!-- this is a block element so it will NOT be on the same line -->\n <h1>Will this be on the same line?</h1>\n\n <!-- \n\n differences between block elements and inline elements\n block: takes up entire width of page unless otherwise told \n (we don't know how yet)\n we can impose dimensions on block elements\n inline: meant to be content or text\n we cannot impose dimensions on inline elements \n\n -->\n\n <!-- how to add more spaces or line breaks?? -->\n <h1>THIS will have many &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; spaces</h1>\n\n <h1>This is <br> Sparta</h1>\n\n <a href=\"http://www.google.com\">Hello, Wrold I'm a link, yo</a>\n\n <!--\n this is one mode\n <tagName attribute1=\"someValue\" attribute2=\"someOtherValue\"></tagName>\n\n this is a self closing tag\n <tagName attribute1=\"someValue\" attribute2=\"someOtherValue\">\n --> \n\n <!--\n convention: \n external links open up in new tab\n absolute URLs\n\n internal links open up in same tab\n relative URLs\n -->\n\n <a href=\"http://www.google.com\" target=\"_blank\">Hello, Wrold I'm ALSO a link, yo</a>\n\n <em>This is an em</em>\n\n <p>This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.</p>\n\n <img src=\"http://placekitten.com/g/200/300\">\n <span>This is a kitten. S/he is cute.</span>\n\n <ul>\n <li>This is a list item <div></div></li>\n <li>This is another list item</li>\n <li>This is a third list item</li>\n </ul>\n\n <ol>\n <li>This is an ordered list item</li>\n <li>This is another ordered list item</li>\n <li>This is a third ordered list item</li>\n </ol>\n\n <div></div>\n\n <span></span>\n```","idx":7},"semantic-html":{"content":"# Semantic HTML\n---\n\n**Learning Objective**: Understand the purpose and utility of including semantic HTML tags in the \"big picture\" of the document flow.\n\n---\n\n\nHTML5 introduces a plethora of new tags. These tags are mainly used to dictate structure and meaning to the **information** that is presented on our website.\n\n#### Exercise\n---\n\nTake the resume that you built for homework and redefine the content using the **semantic** html elements we will be learning about today.\n\nIf you did not do the homework or just wish to use something else, feel free to use my **[resume](http://resume.taqquikarim.com)**.\n\n\n\n#### Properly marking up your page\n---\nDon't worry about what the `id` attributes mean for now.\n\n![site structure](http://i.stack.imgur.com/L4qMt.png)\n\n#### Sections VS Articles\n---\nUse **sections** when you are outlining **chapters in a book**. \n\n**EXAMPLE**: A dessert cookbook could have chapters on **cake** recipes vs **pie** recipes.\n\nUse **articles** when you are defining say **poems** in a volume.\n\n**EXAMPLE**: In our dessert cookbook, **each recipe** in the **cake** section would be an **article**.\n\nYou can nest **articles** into **sections** and **sections** into **articles**.\n\n**EXAMPLE**\n\nArticles can go inside section tags\n```html\n<section>\n    <article>\n      <!-- first blog post -->\n    </article>\n    \n    <!-- .... more articles here ... -->\n</section>\n```\n\nSections can also go inside article tags\n```html\n<article>\n  <section>\n     <!-- introduction -->\n  </section>\n\n  <section>\n     <!-- content -->\n  </section>\n\n  <section>\n     <!-- summary, etc -->\n  </section>\n</article>\n```\n\n**THIS STUFF IS PARTLY SUBJECTIVE; THERE REALLY IS NO ONE RIGHT ANSWER**. As long as we are consistent and don't violate the laws of HTML (ie: we don't put a **p** tag inside a **a** tag, or something like that). \n\n#### Headers, Footers, Nav, Main\n---\n\n* Use headers/foorters/navs as **often as you'd like** within each section/article/aside\n* Each sectioning element (section/article/aside) can have it's own `h1` tag (some validators say this is not recommended but this is still technically allowed)\n* I usually put `nav` tags inside the `header` or `footer` pages\n* **MAIN** can only be used once per page. Typically, it is used to define what the main content block of the page is. Don't have to use it though. \n* Essentially, **the blue in the previous image could be wrapped in a main tag**\n\n\n#### Semantic HTML5 Tags\n---\n\nHere are some of the main tags that are supported.\n\n**SECTION**: Represents a generic document or application section.\n\n**HEADER**: Represents a group of introductory or navigational aids..\n\n**FOOTER**: Represents a footer for a section and can contain information about the author, copyright information, et cetera.\n\n**NAV**: Represents a section of the document intended for navigation.\n\n**MAIN**: Defines the main content of a document.\n\n**ARTICLE**: Represents an independent piece of content of a document, such as a blog entry or newspaper article\n\n**ASIDE**: Represents a piece of content that is only slightly related to the rest of the page.\n\n#### More info on sections vs articles\n---\n\n**SECTION**: Used to either group different articles into different purposes or subjects, or to define the different sections of a single article.\n\n**ARTICLE**: `<article>` is related to `<section>`, but is distinctly different. Whereas `<section>` is for grouping distinct sections of content or functionality, `<article>` is for containing related individual standalone pieces of content, such as individual blog posts, videos, images or news items. \n","idx":8},"practical-css3-guidelines":{"content":"# Practical CSS3 Guidelines\n---\n\n**Learning Objective**: Understand the implementation of CSS3 as a technique for enhancing user experience.\n\n---\n\n\nLet's talk about **CSS**, or **Cascading Style Sheets**, the language that allows us to define styles and adjustments to default content on our webpages.\n\n#### Exercise\n---\nTake the resume that you built in the last section and apply a few of the CSS principles we will cover in this section to improve overall user experience.\n\n### Basic Definition\n---\n\nMethod for searching your html tags efficiently and styling the results it finds.\n\n** Three ways to CSS **\n\n1. This way is evil, we won't even talk about it.\n2. This way is also not very good, we won't even talk about it.\n3. This way is ideal! let's discuss how to link in external files to your index.html...\n\n** Selectors **\n\n**SELECTOR**: a keyword used to query your html tags, classes, ids -- (the last two are html attributes)\n\n**RULES**: the style attributes you are going to set\n\n**[Exhaustive list of CSS properties and values](http://www.w3schools.com/cssref/)**\n\n#### CSS Use Cases\n---\n\nHere are some interesting use cases where CSS3 in particular becomes super handy.\n\n#### Animations\n---\n\nYou can do some really awesome work with animating your elements.\n\n* **[Spinner](http://fewd.us/howdoi/#/problem/42730)**\n\n* **[Repeating, multiple animations](http://fewd.us/howdoi/#/problem/4270)**\n\n#### Transitions\n---\n\nTransitions are animations that are triggered usually by some form of user interaction.\n\n* **[Hover Effects](http://fewd.us/howdoi/#/problem/4268)**\n\n#### Pseudo Selectors\n---\n\nPsuedo classes allow us to style specific types of element features, **i.e.** the **:hover** pseudo selector can be used to style an element as the user puts his mouse over it.\n\n* **[Menu Hover Effect](http://fewd.us/howdoi/#/problem/4957)**\n\nOther examples of pseudo selectors: **:visited**, **:after**, etc\n\n#### Overflows\n---\n\nKeep track of content and determine how it should behave if there is more content than space in the container.\n\n* **[Overflow Example](http://fewd.us/howdoi/#/problem/4165)**\n\n#### Grids\n---\n\nThis one is super expansive and you could literally teach an entire course on this. For now, take a look at a few examples / problems to gain perspective on this.\n\n* **[Vertically and Horizontally Center](http://fewd.us/jargon/#/problem/10099)**\n\n* **[Three Column Grid](http://fewd.us/howdoi/#/problem/4258)**\n\n* **[Flex Align/Justify](http://fewd.us/jargon/#/problem/10100)**\n\n* **[Flex Direction](http://fewd.us/jargon/#/problem/10097)**\n\n* **[Flex Wrap](http://fewd.us/jargon/#/problem/10098)**\n\n#### References\n---\n1. **[Exhaustive Guide to Flex](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)**\n2. **[CSS Animations Reference](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations)**\n3. \n**[Exhaustive list of CSS properties and values](http://www.w3schools.com/cssref/)**\n4. **[Exhaustive list of CSS3 properties](http://www.tutorialrepublic.com/css-reference/css3-properties.php)**\n","idx":9},"styling-for-various-screens":{"content":"# Styling for various Screens\n---\n\n**Learning Objective**: Understand how to apply CSS towards building web layouts that work in multiple screens.\n\n#### Exercise\n---\n\nRefactor your resume website so that it looks good and accessible on mobile screens. This usually means setting a smaller width on your content and perhaps updating font sizes. If you have an column grids you will probably want to stack them.\n\n---\n\nWe can write CSS that will allow us to format our data layouts so that it adheres properly to multiple screen sizes.\n\n#### Basics\n---\n* We want to have the SAME markup for ALL of our webviews\n* A website is responsive if the site layout changes based on the width of the browser pages but can compensate for any width.\n* A website is adaptive if the site layout changes based on the width of the browser but only for predetermined widths.\n* [Examples](http://socialdriver.com/2013/06/10/50-best-responsive-website-design-examples-of-2013/) of responsive sites\n* Always place this in your HTML\n\n```html\n<html>\n    <head>\n        ...\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0;\">\n        ...\n    </head>\n    ...\n</html>\n```\n\n#### Mobile First VS. Desktop First\n---\nThese two schemas are techniques for how we structure our css.\n\n**Most important takeaway**: almost always go with mobile first.\n\n \n* Remember, CSS is cascading which means that we can write one set of styles and then reapply other styles on top of that.\n\n#### Mobile First\n\nWith mobile first, we create the mobile layout first, then add a media query for tablet (with tablet styles) and then add a media query for desktop (with desktop styles)\n\n#### Desktop First\n\nWith desktop first, we create the desktop layout first (so styles for desktop), then add a media query for tablet, then mobile.\n\n#### Mobile First > Desktop First\n**Here's why**:\nforces you to think about the stuff that's really necessary for simplest version of your page and implement those\n\n\n* With mobile first, you simply add styles as needed as width increases (vs removing styles the other way around, which leads to writing more code)\n\n#### Examples\n---\nHere are some examples of different media queries.\n\n* #### [Basic Example; Mobile first](http://fewd.us/howdoi/#/problem/4080)\n\n* #### [Basic; Desktop first](http://fewd.us/howdoi/#/problem/4081)\n\n* #### [AND-ing](http://fewd.us/howdoi/#/problem/4082)\n\n* #### [OR-ing](http://fewd.us/howdoi/#/problem/4083)\n\n* #### [Buckets](http://fewd.us/howdoi/#/problem/4084)\n\n* #### [Overriding](http://fewd.us/howdoi/#/problem/4085)\n\n#### Common Breakpoints\n---\n**NOTE**: you should **NEVER** design for device specificity. Read [this](https://responsivedesign.is/articles/why-you-dont-need-device-specific-breakpoints).\n\n```css\n/* Smartphones (portrait and landscape) ----------- */\n@media only screen and (min-device-width : 320px) and (max-device-width : 480px) {\n/* Styles */\n}\n\n/* Smartphones (landscape) ----------- */\n@media only screen and (min-width : 321px) {\n/* Styles */\n}\n\n/* Smartphones (portrait) ----------- */\n@media only screen and (max-width : 320px) {\n/* Styles */\n}\n\n/* iPads (portrait and landscape) ----------- */\n@media only screen and (min-device-width : 768px) and (max-device-width : 1024px) {\n/* Styles */\n}\n\n/* iPads (landscape) ----------- */\n@media only screen and (min-device-width : 768px) and (max-device-width : 1024px) and (orientation : landscape) {\n/* Styles */\n}\n\n/* iPads (portrait) ----------- */\n@media only screen and (min-device-width : 768px) and (max-device-width : 1024px) and (orientation : portrait) {\n/* Styles */\n}\n/**********\niPad 3\n**********/\n@media only screen and (min-device-width : 768px) and (max-device-width : 1024px) and (orientation : landscape) and (-webkit-min-device-pixel-ratio : 2) {\n/* Styles */\n}\n\n@media only screen and (min-device-width : 768px) and (max-device-width : 1024px) and (orientation : portrait) and (-webkit-min-device-pixel-ratio : 2) {\n/* Styles */\n}\n/* Desktops and laptops ----------- */\n@media only screen  and (min-width : 1224px) {\n/* Styles */\n}\n\n/* Large screens ----------- */\n@media only screen  and (min-width : 1824px) {\n/* Styles */\n}\n\n/* iPhone 4 ----------- */\n@media only screen and (min-device-width : 320px) and (max-device-width : 480px) and (orientation : landscape) and (-webkit-min-device-pixel-ratio : 2) {\n/* Styles */\n}\n\n@media only screen and (min-device-width : 320px) and (max-device-width : 480px) and (orientation : portrait) and (-webkit-min-device-pixel-ratio : 2) {\n/* Styles */\n}\n\n/* iPhone 5 ----------- */\n@media only screen and (min-device-width: 320px) and (max-device-height: 568px) and (orientation : landscape) and (-webkit-device-pixel-ratio: 2){\n/* Styles */\n}\n\n@media only screen and (min-device-width: 320px) and (max-device-height: 568px) and (orientation : portrait) and (-webkit-device-pixel-ratio: 2){\n/* Styles */\n}\n\n/* iPhone 6 ----------- */\n@media only screen and (min-device-width: 375px) and (max-device-height: 667px) and (orientation : landscape) and (-webkit-device-pixel-ratio: 2){\n/* Styles */\n}\n\n@media only screen and (min-device-width: 375px) and (max-device-height: 667px) and (orientation : portrait) and (-webkit-device-pixel-ratio: 2){\n/* Styles */\n}\n\n/* iPhone 6+ ----------- */\n@media only screen and (min-device-width: 414px) and (max-device-height: 736px) and (orientation : landscape) and (-webkit-device-pixel-ratio: 2){\n/* Styles */\n}\n\n@media only screen and (min-device-width: 414px) and (max-device-height: 736px) and (orientation : portrait) and (-webkit-device-pixel-ratio: 2){\n/* Styles */\n}\n\n/* Samsung Galaxy S3 ----------- */\n@media only screen and (min-device-width: 320px) and (max-device-height: 640px) and (orientation : landscape) and (-webkit-device-pixel-ratio: 2){\n/* Styles */\n}\n\n@media only screen and (min-device-width: 320px) and (max-device-height: 640px) and (orientation : portrait) and (-webkit-device-pixel-ratio: 2){\n/* Styles */\n}\n\n/* Samsung Galaxy S4 ----------- */\n@media only screen and (min-device-width: 320px) and (max-device-height: 640px) and (orientation : landscape) and (-webkit-device-pixel-ratio: 3){\n/* Styles */\n}\n\n@media only screen and (min-device-width: 320px) and (max-device-height: 640px) and (orientation : portrait) and (-webkit-device-pixel-ratio: 3){\n/* Styles */\n}\n\n/* Samsung Galaxy S5 ----------- */\n@media only screen and (min-device-width: 360px) and (max-device-height: 640px) and (orientation : landscape) and (-webkit-device-pixel-ratio: 3){\n/* Styles */\n}\n\n@media only screen and (min-device-width: 360px) and (max-device-height: 640px) and (orientation : portrait) and (-webkit-device-pixel-ratio: 3){\n/* Styles */\n}\n```\n","idx":10},"frontend-frameworks":{"content":"# Frontend Frameworks\n---\n\n**Learning Objective**: What are front-end frameworks and how do they allow us to create modern, professional looking websites?\n\n#### Exercise\n---\n\nRe-imagine your resume webpage with one of the frameworks below. Without making too many changes, add some of the prebuilt UI elements that these frameworks offer. \n\n**Challenge**: How would you overwrite some of the styles of these frameworks? Say for example you'd like to add a button with **background-color** pink. How would you do this?\n\n---\n\nFrameworks are basically CSS stylesheets that were developed by other people. They are built in such a way that you don't have to spend time and energy building out commonly reusable components like **buttons** and **input fields**, etc\n\n#### Semantic UI\n---\nSome quick facts:\n\n* They write the CSS and HTML blocks for you, all you do is copy and paste\n* With a basic understanding of HTML/CSS, you can easily start building professional looking websites\n\n**Visit their [website](http://semantic-ui.com/).**\n\n**Read the [docs](http://semantic-ui.com/introduction/getting-started.html).**\n\n#### Material Design\n---\nSome quick facts:\n\n* Built by Google.\n* Follows the Material Design spec that a lot of new Google apps now implement (like Google Calendar, Google Inbox, etc).\n\n**Visit their [website](https://getmdl.io/).**\n\n#### Bootstrap\n---\n\nSome quick facts:\n\n* Built by your boys over @twitter, it is a framework for quickly building out complex webpages\n* Probably **the** most popular front-end framework.\n\n**Visit their [website](http://getbootstrap.com/).**\n\n**Read the [docs](http://getbootstrap.com/getting-started/).**\n\n#### Primer\n---\n\nSome quick facts:\n\n* Build by your boys over @github\n* Much simpler than bootstrap\n* Lighter weight too!\n\n**Visit their [website](http://primercss.io/).**\n","idx":11},"warmup":{"content":"# Warmup\n---\n\nHello! Welcome back! Let's start with some exercises to help us remember where we were last night.\n\n### Exercises\n---\nHere are the main problems that we will solve.\n\n#### Github Deployment Exercise\n---\n\nConsider this **[repo](https://github.com/mottaquikarim/tkc-landingpage)**. Download this code to your computer, save it somewhere and then reupload to Github as **your own repo**. Run it through gitbot and once completed, ensure you can access this page on the internet. It should look like **[this](https://mottaquikarim.github.io/tkc-landingpage/)**.\n\n#### Optional\n---\n**[Consider this repo](https://github.com/FEWDMaterials/RelativePathsReview)**.\n\nYou are given several \"websites\". However they are set up in strange configurations! \n\n**For Each Folder**\n\n1. **WITHOUT** rearranging the files, link the proper css folders in the **`HEAD`** section\n2. If you do it right, hovering over the page in the browser will cause it to change colors\n\n#### Problems 1 - 4\n---\n#### Log in to [Samantha](http://samantha.fewd.us/#/) First!\n\nThen, given the following pages, please complete the task outlined.\n\n#### [CSS Tag Selectors](http://samantha.fewd.us/#fork/mottaquikarim/CSS_Tag_Selectors) | [LIVE Instructor Version](http://samantha.fewd.us/#broadcast/mottaquikarim/CSS_Tag_Selectors)\n\n#### [CSS Class Selectors](http://samantha.fewd.us/#fork/mottaquikarim/CSS_Class_Selectors_2) | [LIVE Instructor Version](http://samantha.fewd.us/#broadcast/mottaquikarim/CSS_Class_Selectors_2)\n\n#### [CSS ID Selectors](http://samantha.fewd.us/#fork/mottaquikarim/CSS_ID_Selectors) | [LIVE Instructor Version](http://samantha.fewd.us/#broadcast/mottaquikarim/CSS_ID_Selectors)\n\n#### [Complex CSS Selectors](http://samantha.fewd.us/#fork/mottaquikarim/Complex_CSS_Selectors) | [LIVE Instructor Version](http://samantha.fewd.us/#broadcast/mottaquikarim/Complex_CSS_Selectors)\n\n","idx":12},"javascript-basics":{"content":"# JavaScript Basics\n---\n\nLet's begin by defining what javascript actually is, how we can load javascript into our webpages, and how we can write a few lines of super basic javascript syntax.\n\n## [JS Global Notes](http://samantha.fewd.us/#fork/mottaquikarim/PFNP_Javascript) | [LIVE Instructor View](http://samantha.fewd.us/#broadcast/mottaquikarim/PFNP_Javascript)\n\n#### Learning Objectives\n---\n1. What can we do with javascript code?\n2. How can we load javascript code into our browser?\n3. What are the different ways we can store, retrieve, and use data in javascript?\n\n#### Exercise\n---\n\nWe want to learn enough javascript to be able to solve the following PSET.\n\n#### [Basic Vars Review](http://samantha.fewd.us/#fork/mottaquikarim/Basic_Vars_Review) | [LIVE Instructor View](http://samantha.fewd.us/#broadcast/mottaquikarim/Basic_Vars_Review)\n\nThis will help you get your fingers warm re: simple javascript variable declarations.\n\n#### What is JavaScript\n---\nOriginally called **Mocha**, then **LiveScript**, then renamed to **JavaScript**.\n\n2. It's a subclass of ECMAScript, a standardization maintained by Ecma International\n3. Basically, Ecma is the **Webster's Dictionary** of JavaScript\n\n### What can you do with Javascript?\n\nJavaScript runs in the <strong>browser</strong>, meaning it is used heavily in user-interaction.\nIn other words, with javascript, you can...\n\n#### Animate stuff\n---\nYou can use javascript to create for example an infinite random prop loop.\n\n<iframe scrolling='no' src='//codepen.io/mottaquikarim/embed/jgIbd/?height=268&theme-id=820&default-tab=result' frameborder='no' allowtransparency='true' allowfullscreen='true' style='min-height: 268px !important;'>See the Pen <a href='http://codepen.io/mottaquikarim/pen/jgIbd/'>jQuery Random Height/Width</a> by Mottaqui Karim (<a href='http://codepen.io/mottaquikarim'>@mottaquikarim</a>) on <a href='http://codepen.io'>CodePen</a>.\n</iframe>\n\n#### Allow the user to control stuff\n---\nYou can allow the user to take control of a UI element and dictate its state.\n\n<iframe height=\"300\" src=\"//jsfiddle.net/2jwnjwfd/1/embedded/result\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n#### Mess with people's minds\n---\nThis is just a pretty cool masking example that is actually pretty hard to pull off with web dev tech (but can be done, as shown here thanks to javascript).\n\n(**FYI**: this formed the basis of [this website](http://maveron.com/) that I built back in the day).\n\n<iframe scrolling='no' src='//codepen.io/mottaquikarim/embed/DABIG/?height=268&theme-id=820&default-tab=result' frameborder='no' allowtransparency='true' allowfullscreen='true' style='min-height: 268px !important;'>See the Pen <a href='http://codepen.io/mottaquikarim/pen/DABIG/'>Mask Effect demo</a> by Mottaqui Karim (<a href='http://codepen.io/mottaquikarim'>@mottaquikarim</a>) on <a href='http://codepen.io'>CodePen</a>.\n</iframe>\n\n#### Determine the state of something on a page in real time\n---\nWe are using something called conditionals here.\n\n<iframe width=\"100%\" height=\"500\" style=\"height: 400px;\" src=\"//jsfiddle.net/hrfq4qrj/1/embedded/result\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n#### Load in data dynamically (this is the best one)\n---\nBasically, we can interact with API data without ever reloading the page!\n\n#### Linking to Javascript\n---\nBefore we begin, let us do some basic bookkeepping.\n\n**How do we set up javascript to run in the browser?**\n\n1. The precedent is similar to what we do to link CSS files &mdash; we employ a tag to tell the HTML page where the javascript code for that page lives.\n\n2. However, we do NOT use the link tag...\n\n3. Instead, we do the following:\n\n```html\n<!doctype html>\n<html>\n\t<head>\n\t\t<!-- Do NOT link to your javascript here -->\n\t</head>\n\t<body>\n\n\t\t<script src=\"PATH_TO_YOUR_JS_FILE\"></script>\n\t</body>\n</html>\n```\n\n**NOTE the `<script>` tag**\n\n1. This is a new tag we have never seen before; remember that the `<link>` tag is for CSS files and the `<script>` tag is for javascript files (for now).\n2. the `src` attribute is what we use to link to the external js file\n3. remember to CLOSE your script tag, unlike the `<link>` tag, `<script>` is NOT self closing!\n\n**Commenting + ( basic debugging of ) code in JavaScript**\n\n```js\n\n// this is an inline comment\n\nconsole.log('You can write debugging statements like so');\n\n/*\n\tthis\n\t\tis\n\t\t\ta\n\t\t\t\tmultilined\n\t\t\t\t\t\tcomment\n*/\n```\n#### Types of Variables\n---\n\nA variable type is a way to classify the different kinds of data we can save to a variable. There are exactly 6 types of variables:\n\n#### Primitives\n\n* `undefined`\n* `null`\n* boolean\n* number\n* string\n\n#### Non Primitive\n\n* Object\n\n### Primitives\n\nA Primitive type is a most basic bit of information that you can store. For example, a number is a primitive because it cannot be made up of any of the other types of variables\n\n<strong>Alternate definition</strong>: Think of this as an atom -- atoms are atoms because we cannot break them down into any more basic bits, same goes for primitives\n\n#### `undefined`\n\nUndefined is the default state of any variable. Basically means the variable is empty or has not yet been assigned a value, primitive or otherwise\n\n#### `null`\n\nThe null variable is different from the `undefined` type, but only subtly so.\n\n1. the `null` type is assigned to a variable, but its \"value\" is empty.\n2. the `undefined` type is by default the value of each variable that is declared but not defined\n3. &#35;esoteric\n\n**[Example](http://fewd.us/howdoi/#/problem/5131)**\n\n#### Booleans\n\nTrue or false. Basically.\n\n```javascript\nvar myBooleanValue = true; // true\nvar myBooleanValueThatIsFalse = false; // false\nconsole.log( typeof myBooleanValue );\n```\n\n#### Numbers\n\nNumeric values that can be operated upon via the standard rules of arithmetic.\n\n```javascript\nvar myNumber = 1;\nvar pi = 3.14159; // ...approximately\n```\n\n\n#### Strings\n\nThis one is interesting, we use this to represent text. Anything between the quotations (double or single, doesn't matter as long as you are consistent) is treated as a number.\n\nSo...\n\n```javascript\nvar myName = 'Taq Karim';\nvar dudeThisIsAString = '105';\n\nvar doubleQuotesRCool2 = \"Look ma! I'm double quoted\";\n```\n\n### Non-Primitives or: how I learned to stop worrying and Love the Object.\n\nObjects are the bees-knees yo.\n\n<div>Seriously.</div>\n\n<strong>Objects are a collection of properties where each property is a primitive type</strong>.\n\n#### In other words...\n```javascript\n// just primitives\nvar someNumber = 1;\nvar someBool = false;\nvar someNullItem = null;\n\n\n// as an object...\nvar myObject = {\n\tsomeNumber: 1\n\t, someBool: false\n\t, someNullItem: null\n}; // notice the use of \":\" instead of \"=\"\n\n// to access these items:\nconsole.log( myObject.someNumber );\nconsole.log( myObject.someBool );\n```\n","idx":13},"functions-and-conditionals":{"content":"# Functions and Conditionals\n---\nLet's learn to actually do stuff with javascript now. Functions and conditionals well help us automate programming tasks and also build in decision making capabilities into our programs.\n\n## [JS Global Notes](http://samantha.fewd.us/#fork/mottaquikarim/PFNP_Javascript) | [LIVE Instructor View](http://samantha.fewd.us/#broadcast/mottaquikarim/PFNP_Javascript)\n\n\n#### Learning Objectives\n---\n1. Understand how to use functions to abstract away common coding tasks\n2. Use conditionals to build in decision making into our code.\n\n#### Exercises\n---\nThe following PSET contains 10 problems. \n#### [PSET - Functions](http://samantha.fewd.us/#fork/mottaquikarim/Functions_Practice) | [LIVE Instructor Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/Functions_Practice)\nWe will attempt to solve some or MOST of them.\n\n#### [PSET - Conditionals](http://samantha.fewd.us/#fork/mottaquikarim/Conditionals) | [LIVE Instructor Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/Conditionals)\nTry to solve all of these\n\n#### [Problem - Calculate Grade](http://samantha.fewd.us/#fork/mottaquikarim/Calculate_Grade) | [LIVE Instructor Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/Calculate_Grade)\nThis one is more difficult, try it out though!\n\n#### Functions\n---\n\nFunctions are essentially actions. We use functions to save a set of `instructions` that we can tell javascript to use over and over again. Functions have names, just like variables, but they hold more than just primitive values.\n\n#### Example\n\nThis is a function declaration.\n\n```javascript\nfunction doSomething() {\n\talert('doing something!');\n}\n```\n\nHere is how we would call that function\n```javascript\n// copying over last code snippet for convenience\nfunction doSomething() {\n\talert('doing something!');\n}\n\n// calling it now\ndoSomething();\n```\n\n#### Alternate way to do this\n\n```javascript\nvar doSomething = function() {\n\talert('doing something!');\n}\n\n// call it\ndoSomething();\n```\n\n#### Conditionals\n---\n\nUsed do perform logic\n\n### Rundown\n<a>JavaScript Logical Operators</a>\n<ul>\n    <li>`===`</li>\n    <li>`!==`</li>\n    <li>`>`</li>\n    <li>`<`</li>\n    <li>`>=`</li>\n    <li>`<=`</li>\n    <li>`&&`</li>\n    <li>`||`</li>\n    <li>`!`</li>\n</ul>\n```js\n// Comparison operators\n// you can evaluate a situation by comparing one value in the script\n// to what you expect it might be\n// the result will be a boolean: true or false\n\n/*\n *  the strict equality checking operator\n *  SYMBOL: ===\n */\nvar three = 3;\nvar equalityCheck = ( three === 3 );\nconsole.log( 'three === 3', equalityCheck );\n// note that equalityCheck, and ALL OTHER COMPARISON OPERATORS\n// evaluate to booleans\nconsole.log( 'typeof equalityCheck', typeof equalityCheck );\n\nvar equalityCheck2 = ( three === '3' ); // false because three is Number\n                                       // but '3' is a string\nconsole.log( \"( three === '3' )\", equalityCheck2 );\n// ALWAYS USE THE STRICT EQUALITY OPERATOR!!\n\n/*\n *  the strict NOT EQUAL checking operator\n *  SYMBOL: !==\n */\n\nvar notEqualityCheck = ( three !== 4 ); // should be true\nvar notEqualityCheck2 = ( three !== 3 ); // should be false;\n\nconsole.log( '( three !== 4 )', notEqualityCheck );\nconsole.log( '( three !== 3 )', notEqualityCheck2 );\n\n/*\n *  the greater than operator\n *  SYMBOL: >\n */\nvar greaterThan = ( three > 4 ); // returns false\nvar greaterThan2 = ( three > 2 ); // true\nconsole.log( '( three > 4 )', greaterThan );\nconsole.log( '( three > 2 )', greaterThan2 );\n\n/*\n *  the less than operator\n *  SYMBOL: <\n */\nvar lessThan = ( three < 2 ); // returns false\nvar lessThan2 = ( three < 5 ); // true\nconsole.log( '(three < 2)', lessThan );\nconsole.log( '(three < 5)', lessThan2 );\n \n/*\n *  the greater than or equal to operator\n *  SYMBOL: >=\n */ \nvar greaterThanOrEqualTo = ( three >= 4 ); // false\nvar greaterThanOrEqualTo2 = ( three >= 3 ); // true\nconsole.log( '( three >= 4 )', greaterThanOrEqualTo );\nconsole.log( '( three >= 3 )', greaterThanOrEqualTo2 );\n\n/*\n *  the less than or equal to operator\n *  SYMBOL: <=\n */ \nvar lessThanOrEqualTo = ( three <= 2 ); // false\nvar lessThanOrEqualTo2 = ( three <= 3 ); // true\nconsole.log( '( three <= 2 )', lessThanOrEqualTo );\nconsole.log( '( three <= 3 )', lessThanOrEqualTo2 );\n\n/*\n *  LOGICAL OPERATORS\n *  logical operators allow you to compare the results of more than one\n *  comparison operator\n *  TYPES: '&&', '||'\n */ \n\n/*\n *  the AND operator\n *  SYMBOL: &&\n *  returns true only when both expressions evaluate to true\n */ \nvar andOp = ((2 < 5) && (3 >=2)); // is 2 less than five AND\n                                  // is 3 greater than or equal to 2\nconsole.log( '((2 < 5) && (3 >=2))', andOp );\nconsole.log( 'typeof andOp', andOp );\n// NOTE, we can string together as many ANDs as we need...\n\n/*\n *  the OR operator\n *  SYMBOL: ||\n *  returns true when ONE of the expressions are true\n */ \nvar orOp = ((2 < 5) || (2 < 1)); // if EITHER one of these exprs are true\n                                 // then will evaluate to true\nconsole.log( '((2 < 5) || (2 < 1))', orOp );\n// NOTE, we can string together as many ORs as we need...\n\n/*\n *  the NOT operator\n *  SYMBOL: !\n *  returns opposite of evaluated expression\n */ \nvar notOp = !(2 < 1);\nconsole.log( '!(2 < 1)', notOp );\n\n// Complete example\n\nfunction checkNumber () {\n    \n    var n = prompt(\"Enter a number\", \"5\")\n        , entered = \"You entered a number between\"; \n\n    if (n >= 1 && n < 10) {\n        alert(entered + \" 0 and 10\");\n    }\n    else if (n >= 10 && n < 20) {\n        alert(entered + \" 9 and 20\");\n    }\n    else if (n >= 20 && n < 30) { \n        alert(entered + \" 19 and 30\");\n    }\n    else if (n >= 30 && n < 40) {\n        alert(entered + \" 29 and 40\");\n    }\n    else if (n >= 40 && n <= 100) {\n        alert(entered + \" 39 and 100\");\n    }\n    else if (n < 1 || n > 100) {\n        alert(\"You entered a number less than 1 or greater than 100\");\n    }\n    else {\n        alert(\"You did not enter a number!\");\n      }\n}\n\n\n```\n\n<a>The conditional block</a>\n<ul>\n    <li>the `if` statement</li>\n    <li>the `if/else` statement</li>\n    <li>the `if/else if/else` statement</li>\n</ul>\n```js\n// the if..else statement check a condition\n// if it resolves to true the first code block is run\n// if the condition resolved to false the second code block is run instead\n\nvar pass = 50    // pass mark\n    , score = 75   // current score\n    , msg;   // message\n    \n// select message to write based on score    \nif ( score >= pass ) {     \n    // conditional statement\n    // if code block\n    // anything in here will be run if\n    // the stuff in the (...) evaluates to true\n    msg = \"Congratulations you passed!\";  \n}    \nelse {  // else code block; if the obove is NOT true then...\n    msg = \" Try again :( \";  \n}\n// note this example of how we can use the if/else\n// to set the value of a variable\nconsole.log( msg ); \n\n/*\n *  the if/else if/else block\n */\n\nvar passingGrade;\nif ( score < 50 ) {\n    passingGrade = \"F\";\n}\nelse if ( score < 60 ) {\n    passingGrade = \"D\";\n}\nelse if ( score < 70 ) {\n    passingGrade = \"C\";\n}\nelse if ( score < 80 ) {\n    passingGrade = \"B\";\n}\nelse if ( score < 90 ) {\n    passingGrade = \"A\"\n}\nelse {\n    passingGrade = \"A+\";\n}\n\nconsole.log( \"Your grade is: \", passingGrade );\n\n\n\n\n\n    \n    \n    \n\n\n\n\n\n\n\n```","idx":14},"arrays-and-objects":{"content":"# Arrays and Objects\n---\nIn this section, we will learn about two non trivial computer science structs: **arrays** and **objects**.\n\n## [JS Global Notes](http://samantha.fewd.us/#fork/mottaquikarim/PFNP_Javascript) | [LIVE Instructor View](http://samantha.fewd.us/#broadcast/mottaquikarim/PFNP_Javascript)\n\n#### Learning Objectives\n---\n1. What are loops and how can we use them to handle dynamic data?\n2. What are objects and how are they useful in \"modeling\" real world things in javascript?\n\n#### Exercise\n---\n\nFirst, let's solve this arrays pset.\n\n#### [Arrays PSET](http://samantha.fewd.us/#fork/mottaquikarim/Arrays_PSET) | [LIVE Instructor View](http://samantha.fewd.us/#broadcast/mottaquikarim/Arrays_PSET)\nTry to complete all of these.\n\n#### [Objects PSET](http://samantha.fewd.us/#fork/mottaquikarim/Objects_PSET) | [LIVE Instructor View](http://samantha.fewd.us/#broadcast/mottaquikarim/Objects_PSET)\nJust one problem!\n\n\n#### Arrays\n---\n\nSome important array methods:\n\n1. push\n2. pop\n3. shift\n4. unshift\n\nAlso, **wth** is a method anyways??\n\n#### Objects\n---\n\nCan be used to model real world things in javascript\n\n\n\n\n\n","idx":15},"dom-manipulation":{"content":"# DOM Manipulation\n---\nHow do we use javascript to manipulate HTML tags and CSS?\n\n#### jQuery 101\n---\n\njQuery is a tool that will make it easier for us to write comlex javascript code more easily.\n\n\n1. How do we add javascript to our webpages?\n2. How do we add specifically **[jQuery](https://developers.google.com/speed/libraries/#jquery)** to our page\n3. What can we do with jQuery? How does CSS play into this?\n\n#### jQuery Plugins\n---\n\nNow, we will look at how jQuery plugins can help us achieve interesting and useful functionality on our pages.\n\n\n1. What are plugins?\n2. How can we incorporate plugins into our page?\n3. How do we know which plugins to use?\n4. How can we use multiple plugins at once?\n\n\n","idx":16},"server-side-javascript":{"content":"# Server Side Javascript\n---\n\nLet's talk a little bit about how information is transferred from the backend to the frontend and back.\n\n#### Web APIs\n\n1. GET\n2. POST\n3. PUT\n4. DELETE\n","idx":17},"__list__":["home","title","desc","essential-terminology","setting-up-your-environment","guts-of-an-http-request","deploying-to-the-internets","html-basics","semantic-html","practical-css3-guidelines","styling-for-various-screens","frontend-frameworks","warmup","javascript-basics","functions-and-conditionals","arrays-and-objects","dom-manipulation","server-side-javascript"]}